name "dvl_teledyne"
version "0.1"

using_library "dvl_teledyne"
import_types_from "dvl_teledyne/PD0Messages.hpp"
import_types_from "dvl_teledyne/Config.hpp"

using_library "aggregator"
import_types_from 'aggregator'

using_task_library "iodrivers_base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the dvl_teledyne namespace.
task_context "Task" do
    subclasses "iodrivers_base::Task"

    property('config', 'dvl_teledyne/Config').
        doc "configuration struct holding a complete set of settings for the dvl"
    property('config_file', '/std/string').
        doc "path to a text file containing DVL commands"

    property('info', 'dvl_teledyne/DeviceInfo').
        doc "device information as read from the DVL (read-only)"

    # Standard deviation override
    property('sigma_override', 'double', 0.0).
        doc("If sigma_override is a valid value greater than zero, it will").
        doc("be used to override the covariance of the velocity measurements.")

    output_port "status", "dvl_teledyne/Status"
    output_port "cell_samples", "dvl_teledyne/CellReadings"
    output_port "bottom_tracking_samples", "dvl_teledyne/BottomTracking"
    output_port "velocity_samples", "base/samples/RigidBodyState"

    #avg value of the ground distance between all 4 DVL Rays
    output_port "ground_distance", "base/samples/RigidBodyState"

    #Default variance of avg ground-distance readings
    property("variance_ground_distance","/double",0.1)

    # Timestamp Estimator
    #
    # No need for a sample_loss_threshold property, as the DVL report sample
    # indexes
    output_port "timestamp_estimator_status", "/aggregator/TimestampEstimatorStatus"
end

